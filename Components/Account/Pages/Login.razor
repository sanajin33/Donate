@page "/Users/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Donate.Data;

@inject SignInManager<AppUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<section class="d-flex align-items-center" style="height: calc(100vh - 88px);">
    <div class="card col-12 col-sm-6 col-md-5 col-lg-4 col-xl-3 shadow mx-auto">
        <div class="card-body">
            <h1 class="fs-4">Log in</h1>
            <div class="row">
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="p-3">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="email" class="mb-2 text-muted">E-Mail Address <span class="text-danger">*</span></label>
                        <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" autofocus />
                        <ValidationMessage For="() => Input.Email" />
                    </div>

                    <div class="mb-3">
                        <div class="mb-2 w-100">
                            <label for="Input.Password" class="text-muted">Password <span class="text-danger">*</span></label>
                            <a class="btn btn-link float-end" href="Users/ForgotPassword">Forgot Password?</a>
                        </div>
                        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <ValidationMessage For="() => Input.Password" />
                    </div>

                    <div class="d-flex align-items-center">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Input.RememberMe" id="Input.RememberMe" class="form-check-input" />
                            <label class="form-check-label" for="Input.RememberMe">Remember me</label>
                        </div>
                        <button class="btn btn-primary ms-auto px-3" type="submit">Login</button>
                    </div>
                </EditForm>
            </div>
        </div>
        <div class="card-footer">
            <div class="bg-light text-center px-3 py-2">
                Don't have an account? <a class="btn btn-link text-dark py-0" href="@(NavigationManager.GetUriWithQueryParameters("Users/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Create One</a>
            </div>
        </div>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Users/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Users/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
