@using Donate.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.Text
@using System.Text.Encodings.Web
@inject UserManager<AppUser> UserManager
@inject IEmailSender<AppUser> EmailSender
@inject NavigationManager NavigationManager

<EditForm Model="_User" OnvalidSubmit="OnSave">
    <DataAnnotationsValidator />
    <FormValidation @ref="FormValidation" />
    <ValidationSummary />

    <div class="row mb-3">
        <div class="col-12 col-md-6">
            <label for="Input.Email" class="mb-2 text-muted">Name</label>
            <InputText @bind-Value="_User.Name" id="Input.Name" class="form-control" autocomplete="fullname" aria-required="true" placeholder="John Smith" autofocus />
            <ValidationMessage For="() => _User.Name" />
        </div>

        <div class="col-12 col-md-6">
            <label for="Input.Type" class="mb-2 text-muted">Type</label>
            <SelectRole @bind-Value="_User.Role" ID="Input.Type" Disabled="@(LastAdmin && _User.Role == "Admin")" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12 col-md-6">
            <label for="Input.Email" class="mb-2 text-muted">Email</label>
            <InputText @bind-Value="_User.Email" id="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
            <ValidationMessage For="() => _User.Email" />
        </div>

        <div class="col-12 col-md-6">
            <label for="Input.PhoneNumber" class="mb-2 text-muted">Phone</label>
            <InputText @bind-Value="_User.PhoneNumber" id="Input.PhoneNumber" class="form-control" aria-required="true" />
            <ValidationMessage For="() => _User.PhoneNumber" />
        </div>
    </div>

    @if (_User.Role == "Organization")
    {
        <div class="mb-3">
            <label for="Input.MissionStatement" class="mb-2 text-muted">MissionStatement</label>
            <InputText @bind-Value="_User.MissionStatement" id="Input.MissionStatement" class="form-control" placeholder="MissionStatement here..." />
            <ValidationMessage For="() => _User.MissionStatement" />
        </div>
    }

    <div class="mb-3">
        <label for="Input.Address" class="mb-2 text-muted">Address</label>
        <InputTextArea @bind-Value="_User.Address" id="Input.Address" class="form-control" placeholder="Address here..." rows="5" />
        <ValidationMessage For="() => _User.Address" />
    </div>

    <div class="mb-3">
        <button type="button" class="btn btn-link text-primary" @onclick="SendPasswordLink">Send password link</button>
    </div>

    <div class="align-items-center d-flex">
        <button type="submit" class="btn btn-primary mx-auto px-5">@(_User.Id == 0 ? "Add" : "Update")</button>
    </div>
</EditForm>

@code {
    [Parameter] public RegisterModel User { get; set; } = new();
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = default!;
    private RegisterModel _User = new();
    FormValidation FormValidation = default!;
    bool LastAdmin;

    protected override async void OnInitialized()
    {
        var role = "";
        if (User.Id > 0)
        {
            using var db = await ContextFactory.CreateDbContextAsync();
            var user = await db.Users.Include(x => x.Roles).FirstOrDefaultAsync(x => x.Id == User.Id);
            if (user == null)
            {
                await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                return;
            }
            else
            {
                role = user.Roles.FirstOrDefault()?.Name ?? "";
                user.Roles.ToList().ForEach(x => x.Users = []);
                User = user.Clone<RegisterModel>()!;
                User.Role = role;
                LastAdmin = await db.ViewUsers.CountAsync(x => x.Role == "Admin" && x.Active == true) == 1;
            }
        }

        _User = User.Clone()!;
        _User.Password = "P@ssw0rd";
        _User.ConfirmPassword = "P@ssw0rd";


        StateHasChanged();
    }

    async Task OnSave()
    {
        var errors = new Dictionary<string, List<string>>();
        FormValidation.ClearErrors();

        using var db = await ContextFactory.CreateDbContextAsync();
        await db.Database.BeginTransactionAsync();

        try
        {
            if (db.Users.Any(u => u.Active == true && u.Email == _User.Email && u.Id != _User.Id))
            {
                errors.Add(nameof(RegisterModel.Email), ["Email already exists."]);
                FormValidation.DisplayErrors(errors);
            }
            else
            {
                if (_User.Id == 0)
                {
                    var newUser = new AppUser
                        {
                            Name = _User.Name.Trim(),
                            MissionStatement = _User.MissionStatement.Trim(),
                            Email = _User.Email.Trim(),
                            NormalizedEmail = _User.Email.ToUpper().Trim(),
                            UserName = _User.Email.Trim(),
                            NormalizedUserName = _User.Email.ToUpper().Trim(),
                            PhoneNumber = _User.PhoneNumber,
                            EmailConfirmed = true,
                            PhoneNumberConfirmed = true,
                            Address = _User.Address,
                            ConcurrencyStamp = Guid.NewGuid().ToString(),
                            SecurityStamp = Guid.NewGuid().ToString(),
                        };
                    await db.Users.AddAsync(newUser);
                    await db.SaveChangesAsync();

                    var newRole = await db.Roles.FirstAsync(x => x.Name == _User.Role);
                    var newUserRole = new IdentityUserRole<int> { UserId = newUser.Id, RoleId = newRole.Id, };
                    await db.UserRoles.AddAsync(newUserRole);
                    await db.SaveChangesAsync();

                    await db.Database.CommitTransactionAsync();

                    await ModalInstance.CloseAsync(ModalResult.Ok());
                }
                else
                {
                    var userInDb = await db.Users.Include(x => x.Roles).FirstOrDefaultAsync(x => x.Id == _User.Id);
                    if (userInDb == null)
                    {
                        await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                        return;
                    }
                    else
                    {
                        userInDb.Name = _User.Name.Trim();
                        userInDb.MissionStatement = _User.MissionStatement.Trim();
                        userInDb.Email = _User.Email.Trim();
                        userInDb.NormalizedEmail = _User.Email.Trim().ToUpper();
                        userInDb.UserName = _User.Email.Trim();
                        userInDb.NormalizedUserName = _User.Email.Trim().ToUpper();
                        userInDb.PhoneNumber = _User.PhoneNumber.Trim();
                        userInDb.Address = _User.Address.Trim();
                        db.Users.Update(userInDb);
                        await db.SaveChangesAsync();

                        if (!userInDb.Roles.Select(x => x.Name).Contains(_User.Role))
                        {
                            var oldUserRole = await db.UserRoles.FirstOrDefaultAsync(x => x.UserId == userInDb.Id);
                            if (oldUserRole != null)
                                db.UserRoles.Remove(oldUserRole);
                            var newRole = await db.Roles.FirstAsync(x => x.Name == _User.Role);
                            var newUserRole = new IdentityUserRole<int> { UserId = userInDb.Id, RoleId = newRole.Id, };
                            await db.UserRoles.AddAsync(newUserRole);
                        }

                        await db.SaveChangesAsync();
                        await db.Database.CommitTransactionAsync();

                        await ModalInstance.CloseAsync(ModalResult.Ok());
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await db.Database.RollbackTransactionAsync();
            ToastSrv.ShowError(ex.Message);
        }
    }

    async Task SendPasswordLink()
    {
        var user = await UserManager.Users.FirstOrDefaultAsync(x => x.Id == _User.Id);
        if (user != null)
        {
            var code = await UserManager.GeneratePasswordResetTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Users/ResetPassword").AbsoluteUri,
                new Dictionary<string, object?> { ["code"] = code });

            await EmailSender.SendPasswordResetLinkAsync(user, user.Email!, HtmlEncoder.Default.Encode(callbackUrl));

            ToastSrv.ShowSuccess("An email has sent to user's email to reset password.");
        }
    }
}