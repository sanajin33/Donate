@using Donate.Data.Entities
@using Microsoft.AspNetCore.Identity
@using System.Diagnostics.CodeAnalysis
@inherits InputSelect<int>

<InputSelect TValue="int" Value="@Value" ValueExpression="@(() => Value)" ValueChanged="OnValueChanged" class="@(IsValid ? "form-select valid" : "form-select invalid")">
    @foreach (var organization in Organizations.OrderBy(x => x.Name))
    {
        <option value="@(organization.Id)">@organization.Name</option>
    }
</InputSelect>
@code {
    AppUser[] Organizations = [];

    protected override async Task OnInitializedAsync()
    {
        using var db = await ContextFactory.CreateDbContextAsync();
        Organizations = await db.Users.Include(x => x.Roles).Where(x => x.Active == true && x.Roles.Count > 0 && x.Roles.First().Name == "Organization").ToArrayAsync();
        foreach (var org in Organizations)
            foreach (var role in org.Roles)
                role.Users = [];
        if (Value == 0)
            await OnValueChanged(Organizations.FirstOrDefault()?.Id ?? 0);
    }

    private bool IsValid => !EditContext.GetValidationMessages(FieldIdentifier).Any();

    async Task OnValueChanged(int value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
        EditContext.NotifyFieldChanged(FieldIdentifier);
    }
}
