@using Donate.Components.Pages.Users
@using Donate.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.Text
@using System.Text.Encodings.Web
@inject NavigationManager NavigationManager

<EditForm Model="_Task" OnvalidSubmit="OnSave">
    <DataAnnotationsValidator />
    <FormValidation @ref="FormValidation" />

    <div class="row mb-3">
        <div class="col-12 col-md-6">
            <label for="Input.Project" class="mb-2 text-muted">Project</label>
            <SelectProject @bind-Value="_Task.ProjectId" ID="Input.Project" />
            <ValidationMessage For="@(() => _Task.ProjectId)" />
        </div>

        <div class="col-12 col-md-6">
            <label for="Input.Description" class="mb-2 text-muted">Description</label>
            <InputText @bind-Value="_Task.Description" id="Input.Description" class="form-control" aria-required="true" />
            <ValidationMessage For="() => _Task.Description" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12 col-md-6">
            <label for="Input.WantedCount" class="mb-2 text-muted">Needed Vunoteers</label>
            <InputNumber TValue="int" @bind-Value="_Task.WantedCount" id="Input.WantedCount" class="form-control" aria-required="true" />
            <ValidationMessage For="() => _Task.WantedCount" />
        </div>

        <div class="col-12 col-md-6">
            <label for="Input.Date" class="mb-2 text-muted">Date</label>
            <InputDate @bind-Value="_Task.Date" id="Input.Date" class="form-control" aria-required="true" />
            <ValidationMessage For="() => _Task.Date" />
        </div>
    </div>

    <div class="align-items-center d-flex">
        <button type="submit" class="btn btn-primary mx-auto px-5">@(_Task.Id == 0 ? "Add" : "Update")</button>
    </div>
</EditForm>

@code {
    [Parameter] public ProjectTask Task { get; set; } = new();
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = default!;
    private ProjectTask _Task = new();
    FormValidation FormValidation = default!;

    protected override async void OnInitialized()
    {
        if (Task.Id > 0)
        {
            using var db = await ContextFactory.CreateDbContextAsync();
            var task = await db.Tasks.FirstOrDefaultAsync(x => x.Id == Task.Id);
            if (task == null)
            {
                await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                return;
            }
            else
            {
                Task = task.Clone<ProjectTask>()!;
            }
        }

        _Task = Task.Clone()!;

        StateHasChanged();
    }

    async Task OnSave()
    {
        var errors = new Dictionary<string, List<string>>();
        FormValidation.ClearErrors();

        using var db = await ContextFactory.CreateDbContextAsync();

        try
        {
            if (_Task.Id == 0)
            {
                var newTask = new ProjectTask
                    {

                        ProjectId = _Task.ProjectId,
                        Description = _Task.Description.Trim(),
                        Date = _Task.Date.ToUniversalTime(),
                        WantedCount = _Task.WantedCount,
                        Status = _Task.Status,
                    };
                await db.Tasks.AddAsync(newTask);
                await db.SaveChangesAsync();

                await ModalInstance.CloseAsync(ModalResult.Ok());
            }
            else
            {
                var taskInDb = await db.Tasks.FirstOrDefaultAsync(x => x.Id == _Task.Id);
                if (taskInDb == null)
                {
                    await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                    return;
                }
                else
                {
                    taskInDb.ProjectId = _Task.ProjectId;
                    taskInDb.Description = _Task.Description.Trim();
                    taskInDb.Date = _Task.Date.ToUniversalTime();
                    taskInDb.WantedCount = _Task.WantedCount;
                    taskInDb.Status = _Task.Status;

                    db.Tasks.Update(taskInDb);
                    await db.SaveChangesAsync();

                    await ModalInstance.CloseAsync(ModalResult.Ok());
                }
            }
        }
        catch (Exception ex)
        {
            ToastSrv.ShowError(ex.Message);
        }
    }
}