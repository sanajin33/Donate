@using Donate.Components.Pages.Users
@using Donate.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.Text
@using System.Text.Encodings.Web
@inject NavigationManager NavigationManager

<EditForm Model="_Project" OnvalidSubmit="OnSave">
    <DataAnnotationsValidator />
    <FormValidation @ref="FormValidation" />

    <div class="row mb-3">
        <div class="col-12 col-md-6">
            <label for="Input.Organization" class="mb-2 text-muted">Organization</label>
            <SelectOrganization @bind-Value="_Project.OrganizationId" ID="Input.Organization" />
            <ValidationMessage For="@(() => _Project.OrganizationId)"/>
        </div>

        <div class="col-12 col-md-6">
            <label for="Input.Title" class="mb-2 text-muted">Title</label>
            <InputText @bind-Value="_Project.Title" id="Input.Title" class="form-control" aria-required="true" placeholder="Food Drive" autofocus />
            <ValidationMessage For="() => _Project.Title" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12 col-md-6">
            <label for="Input.StartDate" class="mb-2 text-muted">Start Date</label>
            <InputDate @bind-Value="_Project.StartDate" id="Input.StartDate" class="form-control" aria-required="true" @onchange="OnStartDateChanged" />
            <ValidationMessage For="() => _Project.StartDate" />
        </div>

        <div class="col-12 col-md-6">
            <label for="Input.EndDate" class="mb-2 text-muted">End Date</label>
            <InputDate @bind-Value="_Project.EndDate" id="Input.EndDate" class="form-control" aria-required="true" @onchange="OnEndDateChanged" />
            <ValidationMessage For="() => _Project.EndDate" />
        </div>
    </div>

    <div class="mb-3">
        <label for="Input.Description" class="mb-2 text-muted">Description</label>
        <InputTextArea @bind-Value="_Project.Description" id="Input.Description" class="form-control" placeholder="Description here..." rows="5" />
        <ValidationMessage For="() => _Project.Description" />
    </div>

    <div class="align-items-center d-flex">
        <button type="submit" class="btn btn-primary mx-auto px-5">@(_Project.Id == 0 ? "Add" : "Update")</button>
    </div>
</EditForm>

@code {
    [Parameter] public Project Project { get; set; } = new();
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = default!;
    private Project _Project = new();
    FormValidation FormValidation = default!;

    protected override async void OnInitialized()
    {
        if (Project.Id > 0)
        {
            using var db = await ContextFactory.CreateDbContextAsync();
            var project = await db.Projects.FirstOrDefaultAsync(x => x.Id == Project.Id);
            if (project == null)
            {
                await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                return;
            }
            else
            {
                Project = project.Clone<Project>()!;
            }
        }

        _Project = Project.Clone()!;

        StateHasChanged();
    }

    async Task OnSave()
    {
        var errors = new Dictionary<string, List<string>>();
        FormValidation.ClearErrors();

        using var db = await ContextFactory.CreateDbContextAsync();

        try
        {
            if (_Project.Id == 0)
            {
                var newProject = new Project
                    {
                        Title = _Project.Title.Trim(),
                        Description = _Project.Description.Trim(),
                        StartDate = _Project.StartDate.HasValue ? _Project.StartDate.Value.ToUniversalTime() : null,
                        EndDate = _Project.EndDate.HasValue ? _Project.EndDate.Value.ToUniversalTime() : null,
                        OrganizationId = _Project.OrganizationId,
                    };
                await db.Projects.AddAsync(newProject);
                await db.SaveChangesAsync();

                await ModalInstance.CloseAsync(ModalResult.Ok());
            }
            else
            {
                var projectInDb = await db.Projects.FirstOrDefaultAsync(x => x.Id == _Project.Id);
                if (projectInDb == null)
                {
                    await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                    return;
                }
                else
                {
                    projectInDb.Title = _Project.Title.Trim();
                    projectInDb.Description = _Project.Description.Trim();
                    projectInDb.StartDate = _Project.StartDate.HasValue ? _Project.StartDate.Value.ToUniversalTime() : null;
                    projectInDb.EndDate = _Project.EndDate.HasValue ? _Project.EndDate.Value.ToUniversalTime() : null;
                    projectInDb.OrganizationId = _Project.OrganizationId;

                    db.Projects.Update(projectInDb);
                    await db.SaveChangesAsync();

                    await ModalInstance.CloseAsync(ModalResult.Ok());
                }
            }
        }
        catch (Exception ex)
        {
            ToastSrv.ShowError(ex.Message);
        }
    }

    private void OnStartDateChanged(ChangeEventArgs e)
    {
        var startDate = DateTime.Parse(e.Value.ToString());
        if (_Project.EndDate.HasValue && startDate > _Project.EndDate.Value)
            _Project.EndDate = startDate;
    }

    private void OnEndDateChanged(ChangeEventArgs e)
    {
        var endDate = DateTime.Parse(e.Value.ToString());
        if (_Project.StartDate.HasValue && endDate < _Project.StartDate.Value)
            _Project.StartDate = endDate;
    }
}