@using Donate.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.Text
@using System.Text.Encodings.Web
@inject NavigationManager NavigationManager

<EditForm Model="_ItemType" OnvalidSubmit="OnSave">
    <DataAnnotationsValidator />
    <FormValidation @ref="FormValidation" />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Input.Email" class="mb-2 text-muted">Name</label>
        <InputText @bind-Value="_ItemType.Name" id="Input.Name" class="form-control" autocomplete="name" aria-required="true" placeholder="Food Supplies" autofocus />
        <ValidationMessage For="() => _ItemType.Name" />
    </div>

    <div class="mb-3">
        <label for="Input.Description" class="mb-2 text-muted">Description</label>
        <InputTextArea @bind-Value="_ItemType.Description" id="Input.Description" class="form-control" placeholder="Description here..." rows="5" />
        <ValidationMessage For="() => _ItemType.Description" />
    </div>

    <div class="align-items-center d-flex">
        <button type="submit" class="btn btn-primary mx-auto px-5">@(_ItemType.Id == 0 ? "Add" : "Update")</button>
    </div>
</EditForm>

@code {
    [Parameter] public DonationItemType ItemType { get; set; } = new();
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = default!;
    private DonationItemType _ItemType = new();
    FormValidation FormValidation = default!;
    bool LastAdmin;

    protected override async void OnInitialized()
    {
        if (ItemType.Id > 0)
        {
            using var db = await ContextFactory.CreateDbContextAsync();
            var itemType = await db.DonationItemTypes.Include(x => x.Items).FirstOrDefaultAsync(x => x.Id == ItemType.Id);
            if (itemType == null)
            {
                await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                return;
            }

            ItemType = itemType.Clone<DonationItemType>()!;
        }

        _ItemType = ItemType.Clone()!;

        StateHasChanged();
    }

    async Task OnSave()
    {
        var errors = new Dictionary<string, List<string>>();
        FormValidation.ClearErrors();

        using var db = await ContextFactory.CreateDbContextAsync();

        try
        {
            if (db.DonationItemTypes.Any(u => u.Active == true && u.Name == _ItemType.Name && u.Id != _ItemType.Id))
            {
                errors.Add(nameof(DonationItemType.Name), ["Name exists."]);
                FormValidation.DisplayErrors(errors);
            }
            else
            {
                if (_ItemType.Id == 0)
                {
                    var newtemType = new DonationItemType { Name = _ItemType.Name.Trim(), Description = _ItemType.Description?.Trim(), };
                    await db.DonationItemTypes.AddAsync(newtemType);
                    await db.SaveChangesAsync();

                    await ModalInstance.CloseAsync(ModalResult.Ok());
                }
                else
                {
                    var itemTypeInDb = await db.DonationItemTypes.Include(x => x.Items).FirstOrDefaultAsync(x => x.Id == _ItemType.Id);
                    if (itemTypeInDb == null)
                    {
                        await ModalInstance.CloseAsync(ModalResult.Cancel("NotFound"));
                        return;
                    }
                    else
                    {
                        itemTypeInDb.Name = _ItemType.Name.Trim();
                        itemTypeInDb.Description = _ItemType.Description?.Trim();
                        db.DonationItemTypes.Update(itemTypeInDb);
                        await db.SaveChangesAsync();

                        await ModalInstance.CloseAsync(ModalResult.Ok());
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastSrv.ShowError(ex.Message);
        }
    }
}